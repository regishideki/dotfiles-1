set backspace=indent,eol,start
set hlsearch
map <Leader>h :noh<cr>
set textwidth=120

nnoremap <Leader>w :w!<CR>
nnoremap <Leader>q :q!<CR>
nnoremap <Leader>wq :wq!<CR>
imap jj <Esc>

nnoremap <Leader><Right> <C-w>3>
nnoremap <Leader><Left> <C-w>3<
nnoremap <Leader><Up> <C-w>3+
nnoremap <Leader><Down> <C-w>3-

map <Leader>i mmgg=G`m<CR>
map <Leader>x :exec getline(".")<cr>
map <Leader>ss :%s/

map <C-n> :NERDTreeToggle<CR>
map <leader>rr :NERDTreeFind<cr>

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

nnoremap <leader>osr :VtrOpenRunner<CR>
nnoremap <leader>va :VtrAttachToPane<CR>
nnoremap <C-f> :VtrSendLinesToRunner<CR>
nnoremap <leader>sc :VtrSendCommandToRunner<CR>

" remove files from crlp
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/bower_components/*,*/node_modules/*,*/dist/*,*/vendor/*

" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
command! -bang -nargs=* FF call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

let g:rg_command = ' 
      \ rg --column --line-number --no-heading --fixed-strings --ignore-case --follow --color "always"
      \ -g "*.{js,json,php,md,styl,jade,html,config,py,cpp,c,go,hs,rb,conf}"
      \ -g "!{.git,node_modules,vendor,tmp,*.lock}/*" '

set grepprg=rg\ --vimgrep

let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" permits navigates in requires as hyperlinks
augroup rubypath
  autocmd FileType ruby setlocal suffixesadd+=.rb
  autocmd FileType ruby setlocal path+=~/workspace/bankfacil/core/**
augroup END
autocmd BufWritePre *.js Neoformat

let g:tmuxline_preset = {
      \'a'    : '#S',
      \'b'    : '#F',
      \'win'  : '#I #W',
      \'cwin' : '#I #W',
      \'y'    : '#(date)',
      \'z'    : '%R'}

if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
endif

" reduce default opdate time from 4s to 250ms (update signs in gitgutter, for example)
set updatetime=250

" install pathogen
execute pathogen#infect()
syntax on
filetype plugin indent on

if isdirectory($HOME . '/dotfiles/UltiSnips')
  let g:UltiSnipsSnippetsDir = $HOME . '/dotfiles/UltiSnips'
  let g:UltiSnipsSnippetDirectories = [$HOME . '/dotfiles/UltiSnips']
endif

" Set ultisnips triggers
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

let test#strategy = "tslime"
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1

" Send current panel line(s) to another one (you can select a panel using <leader v a>
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux

function! VimTestJourney()
  let g:test#ruby#rspec#executable='docker-compose exec web bundle exec rspec'
endfunction

function! VimTestCore()
  let g:test#ruby#rspec#executable='rspec'
endfunction

map <Leader>vtc :call VimTestCore()<CR>
map <Leader>vtj :call VimTestJourney()<CR>

nmap <C-c>r <Plug>SetTmuxVars

function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

autocmd BufWritePre *.rb,*.js :call <SID>StripTrailingWhitespaces()

" change from test to production code and vice-versa using projectionist
nnoremap <leader><leader> :A<CR>

nnoremap src :source $MYVIMRC<cr>

" Use Gundo to manage history
nnoremap <F5> :GundoToggle<CR>

nnoremap <leader>f :Files<cr>
nnoremap <leader>F :FF<cr>

"Use MRU as default in CtrlP
let g:ctrlp_map='<c-p>'
let g:ctrlp_cmd='CtrlPMRU'
let g:ctrlp_mruf_relative = 1 " search only in project - without it, it will search from $HOME =(

" delete fugitive buffers automatically
autocmd BufReadPost fugitive://* set bufhidden=delete

autocmd BufRead,BufNewFile *.js HighlightInlineHbs

set nofoldenable

nnoremap <leader>f :GFiles<cr>
nnoremap <leader>F :FF<cr>

"Use MRU as default in CtrlP
let g:ctrlp_map='<c-p>'
let g:ctrlp_cmd='CtrlPMRU'
let g:ctrlp_mruf_relative = 1 " search only in project - without it, it will search from $HOME =(

map ff <Plug>(easymotion-prefix)

let g:ale_emit_conflict_warnings = 0
